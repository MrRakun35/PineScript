// Bu kaynak kodu, https://mozilla.org/MPL/2.0/ adresindeki Mozilla Genel Kamu Lisansı 2.0 hükümlerine tabidir.
// © Mr_Rakun

//@version=5
indicator("SMA Optimizer", overlay=true)

// Backtest Hesaplamasını yapacak kitaplık
import DinGrogu/backtest/1 as backtest
// © DinGrogu
// https://tr.tradingview.com/script/tsHCuCEi-Backtest-Strategy-Optimizer-Adapter/


// #################################################################
// # Hareketli Ortalama Kesişimi Örnek Fonksiyonu
// #################################################################
f_ma_crossover(_short_len, _long_len, _src=close) =>
    short_ma = ta.sma(_src, _short_len)
    long_ma = ta.sma(_src, _long_len)

    entry = ta.crossover(short_ma, long_ma)
    exit = ta.crossunder(short_ma, long_ma)

    [entry, exit]

// #################################################################
// # ANA DEĞİŞKENLER
// #################################################################
// İster bir tarih, ister belirli bir miktarda bar kullanabilirsiniz.
// Bu örnekte, belirli bir miktarda bar kullanılıyor.
// #################################################################

training_bars = input.int(defval=5000, minval=1, title='Geriye Dönük Hesaplanacak Mum Sayısı', group='Backtest')

date_start = training_bars
date_end = date_start

var best_value = 0.0
var best_pnl = 0.0

// #################################################################
// # GİRİŞLER VE ÇIKIŞLAR
// #################################################################
// Test etmek için buradaki kesişim uzunlukları tanımlanmıştır.
// #################################################################

[entry_001, exit_001] = f_ma_crossover(10, 20)
[entry_002, exit_002] = f_ma_crossover(10, 30)
[entry_003, exit_003] = f_ma_crossover(10, 40)
[entry_004, exit_004] = f_ma_crossover(10, 50)
[entry_005, exit_005] = f_ma_crossover(10, 60)
[entry_006, exit_006] = f_ma_crossover(10, 70)
[entry_007, exit_007] = f_ma_crossover(10, 80)
[entry_008, exit_008] = f_ma_crossover(10, 90)
[entry_009, exit_009] = f_ma_crossover(10, 100)

[entry_010, exit_010] = f_ma_crossover(20, 30)
[entry_011, exit_011] = f_ma_crossover(20, 40)
[entry_012, exit_012] = f_ma_crossover(20, 50)
[entry_013, exit_013] = f_ma_crossover(20, 60)
[entry_014, exit_014] = f_ma_crossover(20, 70)
[entry_015, exit_015] = f_ma_crossover(20, 80)
[entry_016, exit_016] = f_ma_crossover(20, 90)
[entry_017, exit_017] = f_ma_crossover(20, 100)

[entry_018, exit_018] = f_ma_crossover(30, 40)
[entry_019, exit_019] = f_ma_crossover(30, 50)
[entry_020, exit_020] = f_ma_crossover(30, 60)
[entry_021, exit_021] = f_ma_crossover(30, 70)
[entry_022, exit_022] = f_ma_crossover(30, 80)
[entry_023, exit_023] = f_ma_crossover(30, 90)
[entry_024, exit_024] = f_ma_crossover(30, 100)

[entry_025, exit_025] = f_ma_crossover(40, 50)
[entry_026, exit_026] = f_ma_crossover(40, 60)
[entry_027, exit_027] = f_ma_crossover(40, 70)
[entry_028, exit_028] = f_ma_crossover(40, 80)
[entry_029, exit_029] = f_ma_crossover(40, 90)
[entry_030, exit_030] = f_ma_crossover(40, 100)

[entry_031, exit_031] = f_ma_crossover(50, 60)
[entry_032, exit_032] = f_ma_crossover(50, 70)
[entry_033, exit_033] = f_ma_crossover(50, 80)
[entry_034, exit_034] = f_ma_crossover(50, 90)
[entry_035, exit_035] = f_ma_crossover(50, 100)

[entry_036, exit_036] = f_ma_crossover(60, 70)
[entry_037, exit_037] = f_ma_crossover(60, 80)
[entry_038, exit_038] = f_ma_crossover(60, 90)
[entry_039, exit_039] = f_ma_crossover(60, 100)

[entry_040, exit_040] = f_ma_crossover(70, 80)
[entry_041, exit_041] = f_ma_crossover(70, 90)
[entry_042, exit_042] = f_ma_crossover(70, 100)

[entry_043, exit_043] = f_ma_crossover(80, 90)
[entry_044, exit_044] = f_ma_crossover(80, 100)

[entry_045, exit_045] = f_ma_crossover(90, 100)


// #################################################################
// # GERİYE DÖNÜK TEST
// #################################################################
// OTOMATİK OLUŞTURULAN KOD [BAŞLANGIÇ]
// ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

var results_list = array.new_string(45)

pnl_001 = backtest.profit(date_start, date_end, entry_001, exit_001)
pnl_002 = backtest.profit(date_start, date_end, entry_002, exit_002)
pnl_003 = backtest.profit(date_start, date_end, entry_003, exit_003)
pnl_004 = backtest.profit(date_start, date_end, entry_004, exit_004)
pnl_005 = backtest.profit(date_start, date_end, entry_005, exit_005)
pnl_006 = backtest.profit(date_start, date_end, entry_006, exit_006)
pnl_007 = backtest.profit(date_start, date_end, entry_007, exit_007)
pnl_008 = backtest.profit(date_start, date_end, entry_008, exit_008)
pnl_009 = backtest.profit(date_start, date_end, entry_009, exit_009)
pnl_010 = backtest.profit(date_start, date_end, entry_010, exit_010)
pnl_011 = backtest.profit(date_start, date_end, entry_011, exit_011)
pnl_012 = backtest.profit(date_start, date_end, entry_012, exit_012)
pnl_013 = backtest.profit(date_start, date_end, entry_013, exit_013)
pnl_014 = backtest.profit(date_start, date_end, entry_014, exit_014)
pnl_015 = backtest.profit(date_start, date_end, entry_015, exit_015)
pnl_016 = backtest.profit(date_start, date_end, entry_016, exit_016)
pnl_017 = backtest.profit(date_start, date_end, entry_017, exit_017)
pnl_018 = backtest.profit(date_start, date_end, entry_018, exit_018)
pnl_019 = backtest.profit(date_start, date_end, entry_019, exit_019)
pnl_020 = backtest.profit(date_start, date_end, entry_020, exit_020)
pnl_021 = backtest.profit(date_start, date_end, entry_021, exit_021)
pnl_022 = backtest.profit(date_start, date_end, entry_022, exit_022)
pnl_023 = backtest.profit(date_start, date_end, entry_023, exit_023)
pnl_024 = backtest.profit(date_start, date_end, entry_024, exit_024)
pnl_025 = backtest.profit(date_start, date_end, entry_025, exit_025)
pnl_026 = backtest.profit(date_start, date_end, entry_026, exit_026)
pnl_027 = backtest.profit(date_start, date_end, entry_027, exit_027)
pnl_028 = backtest.profit(date_start, date_end, entry_028, exit_028)
pnl_029 = backtest.profit(date_start, date_end, entry_029, exit_029)
pnl_030 = backtest.profit(date_start, date_end, entry_030, exit_030)
pnl_031 = backtest.profit(date_start, date_end, entry_031, exit_031)
pnl_032 = backtest.profit(date_start, date_end, entry_032, exit_032)
pnl_033 = backtest.profit(date_start, date_end, entry_033, exit_033)
pnl_034 = backtest.profit(date_start, date_end, entry_034, exit_034)
pnl_035 = backtest.profit(date_start, date_end, entry_035, exit_035)
pnl_036 = backtest.profit(date_start, date_end, entry_036, exit_036)
pnl_037 = backtest.profit(date_start, date_end, entry_037, exit_037)
pnl_038 = backtest.profit(date_start, date_end, entry_038, exit_038)
pnl_039 = backtest.profit(date_start, date_end, entry_039, exit_039)
pnl_040 = backtest.profit(date_start, date_end, entry_040, exit_040)
pnl_041 = backtest.profit(date_start, date_end, entry_041, exit_041)
pnl_042 = backtest.profit(date_start, date_end, entry_042, exit_042)
pnl_043 = backtest.profit(date_start, date_end, entry_043, exit_043)
pnl_044 = backtest.profit(date_start, date_end, entry_044, exit_044)
pnl_045 = backtest.profit(date_start, date_end, entry_045, exit_045)


if (ta.change(pnl_001))
	array.set(results_list, 0, str.tostring(pnl_001) + '|1')

if (ta.change(pnl_002))
	array.set(results_list, 1, str.tostring(pnl_002) + '|2')

if (ta.change(pnl_003))
	array.set(results_list, 2, str.tostring(pnl_003) + '|3')

if (ta.change(pnl_004))
	array.set(results_list, 3, str.tostring(pnl_004) + '|4')

if (ta.change(pnl_005))
	array.set(results_list, 4, str.tostring(pnl_005) + '|5')

if (ta.change(pnl_006))
	array.set(results_list, 5, str.tostring(pnl_006) + '|6')

if (ta.change(pnl_007))
	array.set(results_list, 6, str.tostring(pnl_007) + '|7')

if (ta.change(pnl_008))
	array.set(results_list, 7, str.tostring(pnl_008) + '|8')

if (ta.change(pnl_009))
	array.set(results_list, 8, str.tostring(pnl_009) + '|9')

if (ta.change(pnl_010))
	array.set(results_list, 9, str.tostring(pnl_010) + '|10')

if (ta.change(pnl_011))
	array.set(results_list, 10, str.tostring(pnl_011) + '|11')

if (ta.change(pnl_012))
	array.set(results_list, 11, str.tostring(pnl_012) + '|12')

if (ta.change(pnl_013))
	array.set(results_list, 12, str.tostring(pnl_013) + '|13')

if (ta.change(pnl_014))
	array.set(results_list, 13, str.tostring(pnl_014) + '|14')

if (ta.change(pnl_015))
	array.set(results_list, 14, str.tostring(pnl_015) + '|15')

if (ta.change(pnl_016))
	array.set(results_list, 15, str.tostring(pnl_016) + '|16')

if (ta.change(pnl_017))
	array.set(results_list, 16, str.tostring(pnl_017) + '|17')

if (ta.change(pnl_018))
	array.set(results_list, 17, str.tostring(pnl_018) + '|18')

if (ta.change(pnl_019))
	array.set(results_list, 18, str.tostring(pnl_019) + '|19')

if (ta.change(pnl_020))
	array.set(results_list, 19, str.tostring(pnl_020) + '|20')

if (ta.change(pnl_021))
	array.set(results_list, 20, str.tostring(pnl_021) + '|21')

if (ta.change(pnl_022))
	array.set(results_list, 21, str.tostring(pnl_022) + '|22')

if (ta.change(pnl_023))
	array.set(results_list, 22, str.tostring(pnl_023) + '|23')

if (ta.change(pnl_024))
	array.set(results_list, 23, str.tostring(pnl_024) + '|24')

if (ta.change(pnl_025))
	array.set(results_list, 24, str.tostring(pnl_025) + '|25')

if (ta.change(pnl_026))
	array.set(results_list, 25, str.tostring(pnl_026) + '|26')

if (ta.change(pnl_027))
	array.set(results_list, 26, str.tostring(pnl_027) + '|27')

if (ta.change(pnl_028))
	array.set(results_list, 27, str.tostring(pnl_028) + '|28')

if (ta.change(pnl_029))
	array.set(results_list, 28, str.tostring(pnl_029) + '|29')

if (ta.change(pnl_030))
	array.set(results_list, 29, str.tostring(pnl_030) + '|30')

if (ta.change(pnl_031))
	array.set(results_list, 30, str.tostring(pnl_031) + '|31')

if (ta.change(pnl_032))
	array.set(results_list, 31, str.tostring(pnl_032) + '|32')

if (ta.change(pnl_033))
	array.set(results_list, 32, str.tostring(pnl_033) + '|33')

if (ta.change(pnl_034))
	array.set(results_list, 33, str.tostring(pnl_034) + '|34')

if (ta.change(pnl_035))
	array.set(results_list, 34, str.tostring(pnl_035) + '|35')

if (ta.change(pnl_036))
	array.set(results_list, 35, str.tostring(pnl_036) + '|36')

if (ta.change(pnl_037))
	array.set(results_list, 36, str.tostring(pnl_037) + '|37')

if (ta.change(pnl_038))
	array.set(results_list, 37, str.tostring(pnl_038) + '|38')

if (ta.change(pnl_039))
	array.set(results_list, 38, str.tostring(pnl_039) + '|39')

if (ta.change(pnl_040))
	array.set(results_list, 39, str.tostring(pnl_040) + '|40')

if (ta.change(pnl_041))
	array.set(results_list, 40, str.tostring(pnl_041) + '|41')

if (ta.change(pnl_042))
	array.set(results_list, 41, str.tostring(pnl_042) + '|42')

if (ta.change(pnl_043))
	array.set(results_list, 42, str.tostring(pnl_043) + '|43')

if (ta.change(pnl_044))
	array.set(results_list, 43, str.tostring(pnl_044) + '|44')

if (ta.change(pnl_045))
	array.set(results_list, 44, str.tostring(pnl_045) + '|45')


// ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
// OTOMATİK OLUŞTURULAN KOD [SON]
// #################################################################


// Her yeni bar oluştuğunda, en iyi kar ve değeri sıfırlayın.
if (barstate.islast)
    best_pnl := 0
    best_value := 0

// Sonra, en iyi kar ve değeri ayarlamak için sonuçlar dizisini tekrar çalıştırın.
if (array.size(results_list) > 0)
    for i = 0 to array.size(results_list) - 1 by 1
        result_string = array.get(results_list, i)
        if (str.contains(result_string, '|'))
            result_values = str.split(result_string, '|')
            result = str.tonumber(array.first(result_values))
            if (not na (result) and result > best_pnl)
                best_value := str.tonumber(array.last(result_values))
                best_pnl := result


var table profit = table.new(position.bottom_center, 2, 2, bgcolor = color.new(color.blue, 50), frame_width = 2, frame_color = #192782)

if barstate.islast
    table.cell(profit, 0, 0, "En Uygun Değer", text_color = color.white, bgcolor = #0c497b)
    table.cell(profit, 1, 0, "Kar Yüzdesi", text_color = color.white, bgcolor = #0c497b)
    table.cell(profit, 0, 1, str.tostring(best_value), text_color = color.white)
    table.cell(profit, 1, 1, "% " + str.tostring(best_pnl, "#,##"), text_color = color.white)
